local M = {
	"nvim-treesitter/nvim-treesitter",
	dependencies = {
		"nvim-treesitter/nvim-treesitter-textobjects",
		"tree-sitter/tree-sitter-cpp",
		"tree-sitter-grammars/tree-sitter-arduino",
		"dlvandenberg/tree-sitter-angular",
		"virchau13/tree-sitter-astro",
	},
	build = ":TSUpdate",
	event = "VeryLazy",
	main = "nvim-treesitter.configs",
}

M.opts = {
	ensure_installed = {
		"lua",
		"dart",
		"luadoc",
		"tsx",
		"json",
		"css",
		"kotlin",
		"dart",
		"python",
		"javascript",
		"typescript",
		"solidity",
		"html",
		"css",
		"vue",
		"rust",
		"c",
		"cpp",
		"arduino",
		"angular",
		"astro",
		"asm",
		"bash",
		"cairo",
		"comment",
		"csv",
		"cuda",
		"dockerfile",
		"diff",
		"disassembly",
		"gdscript",
		"git_config",
		"git_rebase",
		"gitattributes",
		"gitcommit",
		"gitignore",
		"go",
		"godot_resource",
		"java",
		"markdown",
		"php",
		"phpdoc",
		"prisma",
		"requirements",
		"ruby",
		"rust",
		"scheme",
		"scss",
		"solidity",
		"sql",
		"swift",
		"vue",
		"xml",
		"yaml",
		"zathurarc",
	},
	autotag = {
		enable = true,
	},
	hightlight = {
		enable = true,
	},
	indent = {
		enable = true,
	},
	textobjects = {
		select = {
			enable = true,
			lookahead = true,
			keymaps = {
				["af"] = "@function.outer",
				["if"] = "@function.inner",
				["ac"] = "@class.outer",
				["ic"] = "@class.inner",
				["aa"] = "@parameter.outer",
				["ai"] = "@parameter.inner",
				["ia"] = "@conditional.outer",
				["ii"] = "conditional.inner",
				["al"] = "@loop.outer",
				["il"] = "@loop.inner",
				["at"] = "@comment.outer",
				["it"] = "@comment.inner",
			},
		},
		move = {
			enable = true,
			set_jumps = true,
			go_to_next_start = {
				["]m"] = "@function.outer",
				["]]"] = "@class.outer",
				["]o"] = "@loop.*",
			},
			goto_next_end = {
				["]M"] = "@function.outer",
				["]["] = "@class.outer",
			},
			goto_previous_start = {
				["[m"] = "@function.outer",
				["[["] = "@class.outer",
			},
			goto_previous_end = {
				["[M"] = "@function.outer",
				["[]"] = "@class.outer",
			},
			goto_next = {
				["]i"] = "@conditional.inner",
			},
			goto_previous = {
				["[i"] = "@conditional.inner",
			},
		},
		swap = {
			enable = true,
			swap_next = {
				["<leader>a"] = "@parameter.inner",
			},
			swap_previous = {
				["<leader>A"] = "@parameter.inner",
			},
		},
	},
}

return M
